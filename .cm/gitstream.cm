# -*- mode: yaml -*-
# This example configuration provides basic automations to get started with GitStream.
# View the GitStream quickstart for more examples: https://docs.gitstream.cm/examples/

manifest:
  version: 1.0

automations:
  # Add a label that indicates how many minutes it will take to review the PR.
  estimated_time_to_review:
    if:
      - true
    run:
      - action: add-label@v1
        args:
          label: "{{ calc.etr }} min review"
          color: "{{ colors.red if (calc.etr >= 20) else (colors.yellow if (calc.etr >= 5) else colors.green) }}"

  # Inform PR authors when they fail to reference ClickUp tickets in the PR title or description.
  # Post a comment that lists the best experts for the files that were modified.
  explain_code_experts:
    if:
      - true
    run:
      - action: explain-code-experts@v1
        args:
          gt: 10

  # Triggered when someone applies a suggest-reviewer label to a PR.
  assign_code_experts:
    if:
      - "{{ pr.labels | match(term='suggest-reviewer') | some }}"
    run:
      - action: add-reviewers@v1
        args:
          reviewers: "{{ repo | codeExperts(gt=10) }}"
      - action: explain-code-experts@v1
        args:
          gt: 10

  auto_merge:
    if:
      - "{{ is.approved }}"
      - "{{ is.all_checks_passed }}"
      - "{{ has.required_reviews }}"
    run:
      - action: add-comment@v1
        args:
          comment: |
            Debug information for auto-merge:
            - Is approved: {{ is.approved }}
            - All checks passed: {{ is.all_checks_passed }}
            - Has required reviews: {{ has.required_reviews }}
            - Review decision: {{ pr.reviewDecision }}
            - Successful checks: {{ pr.checks.success }}
            - Total checks: {{ pr.checks.total }}
            - Approved reviews count: {{ pr.reviews | filter(attr='state', value='APPROVED') | length }}
            - Skipped checks count: {{ pr.checks.skipped }}
      - action: merge@v1
        args:
          wait_for_all_checks: true
          rebase_on_merge: true

  # This example automation adds a comment whenever someone updates a pull request.
  on_pull_request_update:
    if:
      - true
    run:
      - action: add-comment@v1
        args:
          comment: "This pull request has been updated."

